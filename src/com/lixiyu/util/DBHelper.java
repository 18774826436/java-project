package com.lixiyu.util;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.ColumnListHandler;
import org.apache.commons.dbutils.handlers.ScalarHandler;
import org.apache.commons.lang.StringEscapeUtils;

import com.lixiyu.model.MyDate;
import com.lixiyu.model.User;
import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;
public class DBHelper implements DBConfig {
 /*
 * 使用MySQL数据源获得数据库连接对象
 *
 * @return：MySQL连接对象，如果获得失败返回null
 */
 public static Connection getConnection() {
	 MysqlDataSource mds = new MysqlDataSource();// 创建MySQL数据源
	 mds.setDatabaseName(databaseName);// 设置数据库名称
	 mds.setUser(username);// 设置数据库用户名
	 mds.setPassword(password);// 设置数据库密码
	 try {
		 return mds.getConnection();// 获得连接
	 } catch (SQLException e) {
		 e.printStackTrace();
	 }
		 return null;// 如果获取失败就返回null
 }
 /*
 * 判断指定用户名的用户是否存在
 *
 * @return：如果存在返回true，不存在或者查询失败返回false
 */
 public static boolean exists(String username) {
	 QueryRunner runner = new QueryRunner();// 创建QueryRunner对象
	 String sql = "select id from tb_user where username = '" + username + "';";// 定义查询语句
	 Connection conn = getConnection();// 获得连接
	 ResultSetHandler<List<Object>> rsh = new ColumnListHandler();// 创建结果集处理类
	 try {
		 List<Object> result = runner.query(conn, sql, rsh);// 获得查询结果
	 if (result.size() > 0) {// 如果列表中存在数据
		 return true;// 返回true
	 } else {// 如果列表中没有数据
		 return false;// 返回false
	 }
	 } catch (SQLException e) {
		 e.printStackTrace();
	 } finally {
		 DbUtils.closeQuietly(conn);// 关闭连接
	 }
	 return false;// 如果发生异常返回false
 }
 /*
 * 验证用户名和密码是否正确 使用Commons Lang组件转义字符串避免SQL注入
 *
 * @return：如果正确返回true，错误返回false
 */
 public static boolean check(String username, char[] password) {
	 username = StringEscapeUtils.escapeSql(username);// 将用户输入的用户名转义
	 QueryRunner runner = new QueryRunner();// 创建QueryRunner对象
	 String sql = "select password from tb_user where username = '" + username + "';";// 定义查询语句
	 Connection conn = getConnection();// 获得连接
	 ResultSetHandler<Object> rsh = new ScalarHandler();// 创建结果集处理类
	 try {
		 String result = (String) runner.query(conn, sql, rsh);// 获得查询结果
	 char[] queryPassword = result.toCharArray();// 将查询到得密码转换成字符数组
	 if (Arrays.equals(password, queryPassword)) {// 如果密码相同则返回true
		 Arrays.fill(password, '0');// 清空传入的密码
		 Arrays.fill(queryPassword, '0');// 清空查询的密码
		 return true;
	 } else {// 如果密码不同则返回false
		 Arrays.fill(password, '0');// 清空传入的密码
		 Arrays.fill(queryPassword, '0');// 清空查询的密码
	 return false;
	 }
	 } catch (SQLException e) {
		 e.printStackTrace();
	 } finally {
		 DbUtils.closeQuietly(conn);// 关闭连接
	 }
	 return false;// 如果发生异常返回false
 }
 /*
 * 保存用户输入的注册信息
 *
 * @return：如果保存成功返回true，保存失败返回false
 */
 	public static boolean save(User user) {
		 QueryRunner runner = new QueryRunner();// 创建QueryRunner对象
		 String sql = "insert into tb_user (username, password, email) values (?, ?, ?);";// 定义查询语句
		 Connection conn = getConnection();// 获得连接
		 Object[] params = { user.getUsername(), user.getPassword(), user.getEmail() };// 获得传递的参数
		 try {
			 int result = runner.update(conn, sql, params);// 保存用户
			 JFrame jf = new JFrame();
		 if (result > 0) {// 如果保存成功返回true
			 JOptionPane.showMessageDialog(jf, "保存成功！", "成功的信息", JOptionPane.PLAIN_MESSAGE);
			 return true;
		 } else {// 如果保存失败返回false
			 JOptionPane.showMessageDialog(jf, "保存失败！", "因为系统比较垃圾，请重试", JOptionPane.ERROR_MESSAGE);
			 return false;
		 }
		 } catch (SQLException e) {
			 e.printStackTrace();
		 } finally {
			 DbUtils.closeQuietly(conn);// 关闭连接
		 }
			 return false;// 如果发生异常返回false
	}
 	
	public static boolean save2(MyDate date) {
		 QueryRunner runner = new QueryRunner();// 创建QueryRunner对象
		 String sql = "insert into tb_date (day, mouth, year,contest) values (?, ?, ?,?);";// 定义查询语句
		 Connection conn = getConnection();// 获得连接
		 Object[] params = { date.getDay(), date.getMouth(), date.getYear(),date.getContest() };// 获得传递的参数
		 try {
			 int result = runner.update(conn, sql, params);// 保存用户
		 JFrame jf = new JFrame();
		 if (result > 0) {// 如果保存成功返回true
			 JOptionPane.showMessageDialog(jf, "保存成功！", "成功的信息", JOptionPane.PLAIN_MESSAGE);
			 return true;
		 } else {// 如果保存失败返回false
			 JOptionPane.showMessageDialog(jf, "保存失败！", "因为系统比较垃圾，请重试", JOptionPane.ERROR_MESSAGE);
			 return false;
		 }
		 } catch (SQLException e) {
			 e.printStackTrace();
		 } finally {
			 DbUtils.closeQuietly(conn);// 关闭连接
		 }
			 return false;// 如果发生异常返回false
	}
 	
	public static MyDate fetch() {
		 Connection conn = getConnection();// 获得连接
		 try {
				Statement stmt = conn.createStatement();
				//stmt.executeUpdate(sql);
				String sql = "select * from tb_date";
				ResultSet rs = stmt.executeQuery(sql);
				MyDate list = new MyDate();
				while(rs.next())
				{
					//int id = rs.getInt(1);
					String year = rs.getString(1);
					String month = rs.getString(2);
					String day = rs.getString(3);
					String contest = rs.getString(4);
					
					list.setYear(year);
					list.setMouth(month);
					list.setDay(day);
					list.setContest(contest);
					//System.out.println("id" + id + '\n' + "name" + name);
				}
				return list;
			}catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}// 获得查询结果
		 return null;
	 }
}